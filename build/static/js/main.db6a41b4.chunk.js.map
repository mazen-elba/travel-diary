{"version":3,"sources":["API.js","LogEntryForm.js","App.js","index.js"],"names":["API_URL","window","location","hostname","listLogEntries","a","fetch","response","json","createLogEntry","entry","apiKey","method","headers","body","JSON","stringify","get","includes","text","message","ok","error","Error","LogEntryForm","onClose","useState","loading","setLoading","setError","useForm","register","handleSubmit","onSubmit","data","latitude","longitude","console","className","htmlFor","type","name","required","ref","rows","disabled","App","logEntries","setLogEntries","showPopup","setShowPopup","addEntryLocation","setAddEntryLocation","width","height","zoom","viewport","setViewport","getEntries","useEffect","mapStyle","mapboxApiAccessToken","process","onViewportChange","onDblClick","event","lngLat","map","Fragment","key","_id","onClick","style","version","id","x","y","viewBox","d","closeButton","closeOnClick","dynamicPosition","anchor","title","comments","Date","visitDate","toLocaleDateString","image","src","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db6a41b4.chunk.js","sourcesContent":["const API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:1337\"\n    : \"https://travel-log-api.now.sh\";\n\nexport async function listLogEntries() {\n  const response = await fetch(`${API_URL}/api/logs`);\n  return response.json();\n}\n\nexport async function createLogEntry(entry) {\n  const apiKey = entry.apiKey;\n  delete entry.apiKey;\n  const response = await fetch(`${API_URL}/api/logs`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      \"X-API-KEY\": apiKey,\n    },\n    body: JSON.stringify(entry),\n  });\n  let json;\n  if (response.headers.get(\"content-type\").includes(\"text/html\")) {\n    const message = await response.text();\n    json = {\n      message,\n    };\n  } else {\n    json = await response.json();\n  }\n  if (response.ok) {\n    return json;\n  }\n  const error = new Error(json.message);\n  error.response = json;\n  throw error;\n}\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { createLogEntry } from \"./API\";\n\nconst LogEntryForm = ({ location, onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true);\n      data.latitude = location.latitude;\n      data.longitude = location.longitude;\n      await createLogEntry(data);\n      onClose();\n    } catch (error) {\n      console.error(error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"entry-form\">\n      {error ? <h3 className=\"error\">{error}</h3> : null}\n      <label htmlFor=\"apiKey\">API KEY</label>\n      <input type=\"password\" name=\"apiKey\" required ref={register} />\n      <label htmlFor=\"title\">Title</label>\n      <input name=\"title\" required ref={register} />\n      <label htmlFor=\"comments\">Comments</label>\n      <textarea name=\"comments\" rows={3} ref={register}></textarea>\n      <label htmlFor=\"description\">Description</label>\n      <textarea name=\"description\" rows={3} ref={register}></textarea>\n      <label htmlFor=\"image\">Image</label>\n      <input name=\"image\" ref={register} />\n      <label htmlFor=\"visitDate\">Visit Date</label>\n      <input name=\"visitDate\" type=\"date\" required ref={register} />\n      <button disabled={loading}>\n        {loading ? \"Loading...\" : \"Create Entry\"}\n      </button>\n    </form>\n  );\n};\n\nexport default LogEntryForm;\n","import React, { useState, useEffect } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\n\nimport { listLogEntries } from \"./API\";\nimport LogEntryForm from \"./LogEntryForm\";\n\nconst App = () => {\n  const [logEntries, setLogEntries] = useState([]);\n  const [showPopup, setShowPopup] = useState({});\n  const [addEntryLocation, setAddEntryLocation] = useState(null);\n  const [viewport, setViewport] = useState({\n    width: \"100vw\",\n    height: \"100vh\",\n    latitude: 37.6,\n    longitude: -95.665,\n    zoom: 3,\n  });\n\n  const getEntries = async () => {\n    const logEntries = await listLogEntries();\n    setLogEntries(logEntries);\n  };\n\n  useEffect(() => {\n    getEntries();\n  }, []);\n\n  const showAddMarkerPopup = (event) => {\n    const [longitude, latitude] = event.lngLat;\n    setAddEntryLocation({\n      latitude,\n      longitude,\n    });\n  };\n\n  return (\n    <ReactMapGL\n      {...viewport}\n      mapStyle=\"mapbox://styles/thecjreynolds/ck117fnjy0ff61cnsclwimyay\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      onViewportChange={setViewport}\n      onDblClick={showAddMarkerPopup}\n    >\n      {logEntries.map((entry) => (\n        <React.Fragment key={entry._id}>\n          <Marker latitude={entry.latitude} longitude={entry.longitude}>\n            <div\n              onClick={() =>\n                setShowPopup({\n                  // ...showPopup,\n                  [entry._id]: true,\n                })\n              }\n            >\n              <svg\n                className=\"marker yellow\"\n                style={{\n                  height: `${6 * viewport.zoom}px`,\n                  width: `${6 * viewport.zoom}px`,\n                }}\n                version=\"1.1\"\n                id=\"Layer_1\"\n                x=\"0px\"\n                y=\"0px\"\n                viewBox=\"0 0 512 512\"\n              >\n                <g>\n                  <g>\n                    <path\n                      d=\"M256,0C153.755,0,70.573,83.182,70.573,185.426c0,126.888,165.939,313.167,173.004,321.035\n                        c6.636,7.391,18.222,7.378,24.846,0c7.065-7.868,173.004-194.147,173.004-321.035C441.425,83.182,358.244,0,256,0z M256,278.719\n                        c-51.442,0-93.292-41.851-93.292-93.293S204.559,92.134,256,92.134s93.291,41.851,93.291,93.293S307.441,278.719,256,278.719z\"\n                    />\n                  </g>\n                </g>\n              </svg>\n            </div>\n          </Marker>\n          {showPopup[entry._id] ? (\n            <Popup\n              latitude={entry.latitude}\n              longitude={entry.longitude}\n              closeButton={true}\n              closeOnClick={false}\n              dynamicPosition={true}\n              onClose={() => setShowPopup({})}\n              anchor=\"top\"\n            >\n              <div className=\"popup\">\n                <h3>{entry.title}</h3>\n                <p>{entry.comments}</p>\n                <small>\n                  Visited on: {new Date(entry.visitDate).toLocaleDateString()}\n                </small>\n                {entry.image && <img src={entry.image} alt={entry.title} />}\n              </div>\n            </Popup>\n          ) : null}\n        </React.Fragment>\n      ))}\n      {addEntryLocation ? (\n        <>\n          <Marker\n            latitude={addEntryLocation.latitude}\n            longitude={addEntryLocation.longitude}\n          >\n            <div>\n              <svg\n                className=\"marker red\"\n                style={{\n                  height: `${6 * viewport.zoom}px`,\n                  width: `${6 * viewport.zoom}px`,\n                }}\n                version=\"1.1\"\n                id=\"Layer_1\"\n                x=\"0px\"\n                y=\"0px\"\n                viewBox=\"0 0 512 512\"\n              >\n                <g>\n                  <g>\n                    <path\n                      d=\"M256,0C153.755,0,70.573,83.182,70.573,185.426c0,126.888,165.939,313.167,173.004,321.035\n                      c6.636,7.391,18.222,7.378,24.846,0c7.065-7.868,173.004-194.147,173.004-321.035C441.425,83.182,358.244,0,256,0z M256,278.719\n                      c-51.442,0-93.292-41.851-93.292-93.293S204.559,92.134,256,92.134s93.291,41.851,93.291,93.293S307.441,278.719,256,278.719z\"\n                    />\n                  </g>\n                </g>\n              </svg>\n            </div>\n          </Marker>\n          <Popup\n            latitude={addEntryLocation.latitude}\n            longitude={addEntryLocation.longitude}\n            closeButton={true}\n            closeOnClick={false}\n            dynamicPosition={true}\n            onClose={() => setAddEntryLocation(null)}\n            anchor=\"top\"\n          >\n            <div className=\"popup\">\n              <LogEntryForm\n                onClose={() => {\n                  setAddEntryLocation(null);\n                  getEntries();\n                }}\n                location={addEntryLocation}\n              />\n            </div>\n          </Popup>\n        </>\n      ) : null}\n    </ReactMapGL>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}